package io.github.tuannh982.mux.statements;

import io.github.tuannh982.mux.commons.binary.ByteUtils;
import io.github.tuannh982.mux.commons.io.IOUtils;
import io.github.tuannh982.mux.commons.tuple.Tuple2;
import io.github.tuannh982.mux.connection.MuxConnection;
import io.github.tuannh982.mux.statements.history.MethodInvocationEntry;
import io.github.tuannh982.mux.statements.history.PreparedStatementMethodInvocation;
import io.github.tuannh982.mux.statements.resultset.MuxResultSet;

import java.io.IOException;
import java.io.InputStream;
import java.io.Reader;
import java.math.BigDecimal;
import java.net.URL;
import java.nio.charset.StandardCharsets;
import java.sql.*;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;
import java.util.Map;

import static io.github.tuannh982.mux.connection.Constants.OPERATION_NOT_SUPPORTED;
import static io.github.tuannh982.mux.statements.MuxPreparedStatementMethodInvocation.*;

public class MuxPreparedStatement extends MuxStatement implements PreparedStatement {
    private final ConstructorType preparedConstructorType;
    //------------------------------------------------------------------------------------------------------------------
    private final PreparedStatementMethodInvocation methodInvocationState = new PreparedStatementMethodInvocation();
    //------------------------------------------------------------------------------------------------------------------
    protected String sql;
    protected int autoGeneratedKeys;
    protected int[] columnIndexes = new int[0];
    protected String[] columnNames = new String[0];
    //------------------------------------------------------------------------------------------------------------------

    private enum ConstructorType {
        PREP_STATEMENT_S,
        PREP_STATEMENT_S_II,
        PREP_STATEMENT_S_III,
        PREP_STATEMENT_S_AUTO_GENERATED_KEY,
        PREP_STATEMENT_S_COLUMN_IDX,
        PREP_STATEMENT_S_COLUMN_NAMES
    }

    public MuxPreparedStatement(MuxConnection connection, String sql) {
        super();
        super.init(connection);
        this.sql = sql;
        this.preparedConstructorType = ConstructorType.PREP_STATEMENT_S;
    }

    public MuxPreparedStatement(MuxConnection connection, String sql, int resultSetType, int resultSetConcurrency) {
        super();
        super.init(connection);
        this.sql = sql;
        this.resultSetType = resultSetType;
        this.resultSetConcurrency = resultSetConcurrency;
        this.preparedConstructorType = ConstructorType.PREP_STATEMENT_S_II;
    }

    public MuxPreparedStatement(MuxConnection connection, String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) {
        super();
        super.init(connection);
        this.sql = sql;
        this.resultSetType = resultSetType;
        this.resultSetConcurrency = resultSetConcurrency;
        this.resultSetHoldability = resultSetHoldability;
        this.preparedConstructorType = ConstructorType.PREP_STATEMENT_S_III;
    }

    public MuxPreparedStatement(MuxConnection connection, String sql, int autoGeneratedKeys) {
        super();
        super.init(connection);
        this.sql = sql;
        this.autoGeneratedKeys = autoGeneratedKeys;
        this.preparedConstructorType = ConstructorType.PREP_STATEMENT_S_AUTO_GENERATED_KEY;
    }

    public MuxPreparedStatement(MuxConnection connection, String sql, int[] columnIndexes) {
        super();
        super.init(connection);
        this.sql = sql;
        this.columnIndexes = columnIndexes;
        this.preparedConstructorType = ConstructorType.PREP_STATEMENT_S_COLUMN_IDX;
    }

    public MuxPreparedStatement(MuxConnection connection, String sql, String[] columnNames) {
        super();
        super.init(connection);
        this.sql = sql;
        this.columnNames = columnNames;
        this.preparedConstructorType = ConstructorType.PREP_STATEMENT_S_COLUMN_NAMES;
    }

    //-------------------------
    private void prepareStatements(Map<Integer, Tuple2<String, PreparedStatementMethodInvocation>> analyzedResult) throws SQLException {
        switch (preparedConstructorType) {
            case PREP_STATEMENT_S:
                statements = connection.getInternal().createPreparedStatement(analyzedResult);
                break;
            case PREP_STATEMENT_S_II:
                statements = connection.getInternal().createPreparedStatement(analyzedResult, resultSetType, resultSetConcurrency);
                break;
            case PREP_STATEMENT_S_III:
                statements = connection.getInternal().createPreparedStatement(analyzedResult, resultSetType, resultSetConcurrency, resultSetHoldability);
                break;
            case PREP_STATEMENT_S_AUTO_GENERATED_KEY:
                statements = connection.getInternal().createPreparedStatement(analyzedResult, autoGeneratedKeys);
                break;
            case PREP_STATEMENT_S_COLUMN_IDX:
                statements = connection.getInternal().createPreparedStatement(analyzedResult, columnIndexes);
                break;
            case PREP_STATEMENT_S_COLUMN_NAMES:
                statements = connection.getInternal().createPreparedStatement(analyzedResult, columnNames);
                break;
            default:
                throw new SQLException("Unexpected type " + preparedConstructorType);
        }
    }

    private void playback(PreparedStatementMethodInvocation analyzed, PreparedStatement statement) {
        // TODO
    }

    //-------------------------
    @Override
    public ResultSet executeQuery() throws SQLException {
        synchronized (this) {
            Map<Integer, Tuple2<String, PreparedStatementMethodInvocation>> analyzedResult =
                    analyzer.analyze(sql, true, methodInvocationState, shardOps);
            prepareStatements(analyzedResult);
            playback();
            List<ResultSet> resultSets = new ArrayList<>(analyzedResult.size());
            for (Map.Entry<Integer, Statement> entry : statements.entrySet()) {
                int index = entry.getKey();
                PreparedStatementMethodInvocation analyzed = analyzedResult.get(index).getA1();
                PreparedStatement statement = (PreparedStatement) entry.getValue();
                playback(analyzed, statement);
                statement.executeQuery();
            }
            resultSet = new MuxResultSet(this, resultSets);
            return resultSet;
        }
    }

    @Override
    public int executeUpdate() throws SQLException {
        synchronized (this) {
            Map<Integer, Tuple2<String, PreparedStatementMethodInvocation>> analyzedResult =
                    analyzer.analyze(sql, true, methodInvocationState, shardOps);
            prepareStatements(analyzedResult);
            playback();
            int affected = 0;
            for (Map.Entry<Integer, Statement> entry : statements.entrySet()) {
                int index = entry.getKey();
                PreparedStatementMethodInvocation analyzed = analyzedResult.get(index).getA1();
                PreparedStatement statement = (PreparedStatement) entry.getValue();
                playback(analyzed, statement);
                affected += statement.executeUpdate();
            }
            updateCount = affected;
            return updateCount;
        }
    }

    @Override
    public boolean execute() throws SQLException {
        synchronized (this) {
            Map<Integer, Tuple2<String, PreparedStatementMethodInvocation>> analyzedResult =
                    analyzer.analyze(sql, true, methodInvocationState, shardOps);
            prepareStatements(analyzedResult);
            playback();
            boolean ret = false;
            for (Map.Entry<Integer, Statement> entry : statements.entrySet()) {
                int index = entry.getKey();
                PreparedStatementMethodInvocation analyzed = analyzedResult.get(index).getA1();
                PreparedStatement statement = (PreparedStatement) entry.getValue();
                playback(analyzed, statement);
                ret |= statement.execute();
            }
            return ret;
        }
    }
    //-------------------------
    @Override
    public void setNull(int i, int i1) throws SQLException {
        methodInvocationState.getState().put(i, new MethodInvocationEntry<>(SET_NULL_INT_I_INT_I1, new Object[] {i1}));
        methodInvocationState.getBrState().put(i, null);
    }

    @Override
    public void setBoolean(int i, boolean b) throws SQLException {
        methodInvocationState.getState().put(i, new MethodInvocationEntry<>(SET_BOOLEAN_INT_I_BOOLEAN_B, new Object[] {b}));
        methodInvocationState.getBrState().put(i, new byte[] {(byte) (b ? 1 : 0)});
    }

    @Override
    public void setByte(int i, byte b) throws SQLException {
        methodInvocationState.getState().put(i, new MethodInvocationEntry<>(SET_BYTE_INT_I_BYTE_B, new Object[] {b}));
        methodInvocationState.getBrState().put(i, new byte[] {b});
    }

    @Override
    public void setShort(int i, short i1) throws SQLException {
        methodInvocationState.getState().put(i, new MethodInvocationEntry<>(SET_SHORT_INT_I_SHORT_I1, new Object[] {i1}));
        byte[] bArr = new byte[Short.BYTES];
        ByteUtils.writeShort(bArr, 0, i1);
        methodInvocationState.getBrState().put(i, bArr);
    }

    @Override
    public void setInt(int i, int i1) throws SQLException {
        methodInvocationState.getState().put(i, new MethodInvocationEntry<>(SET_INT_INT_I_INT_I1, new Object[] {i1}));
        byte[] bArr = new byte[Integer.BYTES];
        ByteUtils.writeInt(bArr, 0, i1);
        methodInvocationState.getBrState().put(i, bArr);
    }

    @Override
    public void setLong(int i, long l) throws SQLException {
        methodInvocationState.getState().put(i, new MethodInvocationEntry<>(SET_LONG_INT_I_LONG_L, new Object[] {l}));
        byte[] bArr = new byte[Long.BYTES];
        ByteUtils.writeLong(bArr, 0, l);
        methodInvocationState.getBrState().put(i, bArr);
    }

    @Override
    public void setFloat(int i, float v) throws SQLException {
        methodInvocationState.getState().put(i, new MethodInvocationEntry<>(SET_FLOAT_INT_I_FLOAT_V, new Object[] {v}));
        int intValue = Float.floatToIntBits(v);
        byte[] bArr = new byte[Integer.BYTES];
        ByteUtils.writeInt(bArr, 0, intValue);
        methodInvocationState.getBrState().put(i, bArr);
    }

    @Override
    public void setDouble(int i, double v) throws SQLException {
        methodInvocationState.getState().put(i, new MethodInvocationEntry<>(SET_DOUBLE_INT_I_DOUBLE_V, new Object[] {v}));
        long longValue = Double.doubleToLongBits(v);
        byte[] bArr = new byte[Long.BYTES];
        ByteUtils.writeLong(bArr, 0, longValue);
        methodInvocationState.getBrState().put(i, bArr);
    }

    @Override
    public void setBigDecimal(int i, BigDecimal bigDecimal) throws SQLException {
        methodInvocationState.getState().put(i, new MethodInvocationEntry<>(SET_BIGDECIMAL_INT_I_BIGDECIMAL_BIGDECIMAL, new Object[] {bigDecimal}));
        if (bigDecimal == null) {
            methodInvocationState.getBrState().put(i, null);
        } else {
            byte[] bArr = bigDecimal.unscaledValue().toByteArray();
            methodInvocationState.getBrState().put(i, bArr);
        }
    }

    @Override
    public void setString(int i, String s) throws SQLException {
        methodInvocationState.getState().put(i, new MethodInvocationEntry<>(SET_STRING_INT_I_STRING_S, new Object[] {s}));
        if (s == null) {
            methodInvocationState.getBrState().put(i, null);
        } else {
            methodInvocationState.getBrState().put(i, s.getBytes(StandardCharsets.UTF_8));
        }
    }

    @Override
    public void setBytes(int i, byte[] bytes) throws SQLException {
        methodInvocationState.getState().put(i, new MethodInvocationEntry<>(SET_BYTES_INT_I_BYTEARR_BYTES, new Object[] {bytes}));
        methodInvocationState.getBrState().put(i, bytes);
    }

    @Override
    public void setDate(int i, Date date) throws SQLException {
        internalSetDate(i, date, SET_DATE_INT_I_DATE_DATE);
    }

    @Override
    public void setTime(int i, Time time) throws SQLException {
        internalSetDate(i, time, SET_TIME_INT_I_TIME_TIME);
    }

    @Override
    public void setTimestamp(int i, Timestamp timestamp) throws SQLException {
        internalSetDate(i, timestamp, SET_TIMESTAMP_INT_I_TIMESTAMP_TIMESTAMP);
    }

    @Override
    public void setAsciiStream(int i, InputStream inputStream, int i1) throws SQLException {
        internalSetInputStream(i, inputStream, i1, SET_ASCIISTREAM_INT_I_INPUTSTREAM_INPUTSTREAM_INT_I1);
    }

    /**
     * @deprecated
     */
    @Deprecated
    @Override
    public void setUnicodeStream(int i, InputStream inputStream, int i1) throws SQLException {
        internalSetInputStream(i, inputStream, i1, SET_UNICODESTREAM_INT_I_INPUTSTREAM_INPUTSTREAM_INT_I1);
    }

    @Override
    public void setBinaryStream(int i, InputStream inputStream, int i1) throws SQLException {
        internalSetInputStream(i, inputStream, i1, SET_BINARYSTREAM_INT_I_INPUTSTREAM_INPUTSTREAM_INT_I1);
    }

    @Override
    public void setObject(int i, Object o, int i1) throws SQLException {
        methodInvocationState.getState().put(i, new MethodInvocationEntry<>(SET_OBJECT_INT_I_OBJECT_O_INT_I1, new Object[] {o, i1}));
        if (o == null) {
            methodInvocationState.getBrState().put(i, null);
        } else {
            // TODO
        }
    }

    @Override
    public void setObject(int i, Object o) throws SQLException {
        methodInvocationState.getState().put(i, new MethodInvocationEntry<>(SET_OBJECT_INT_I_OBJECT_O, new Object[] {o}));
        if (o == null) {
            methodInvocationState.getBrState().put(i, null);
        } else {
            // TODO
        }
    }

    @Override
    public void setCharacterStream(int i, Reader reader, int i1) throws SQLException {
        internalSetReader(i, reader, i1, SET_CHARACTERSTREAM_INT_I_READER_READER_INT_I1);
    }

    @Override
    public void setRef(int i, Ref ref) throws SQLException {
        // will not be supported
        throw new SQLException(OPERATION_NOT_SUPPORTED);
    }

    @Override
    public void setBlob(int i, Blob blob) throws SQLException {
        methodInvocationState.getState().put(i, new MethodInvocationEntry<>(SET_BLOB_INT_I_BLOB_BLOB, new Object[] {blob}));
        if (blob == null) {
            methodInvocationState.getBrState().put(i, null);
        } else {
            try {
                byte[] bArr = IOUtils.streamToBytes(blob.getBinaryStream(), blob.length());
                methodInvocationState.getBrState().put(i, bArr);
            } catch (IOException e) {
                throw new SQLException(e);
            }
        }
    }

    @Override
    public void setClob(int i, Clob clob) throws SQLException {
        internalSetClob(i, clob, SET_CLOB_INT_I_CLOB_CLOB);
    }

    @Override
    public void setArray(int i, Array array) throws SQLException {
        // will not be supported
        throw new SQLException(OPERATION_NOT_SUPPORTED);
    }

    @Override
    public void setDate(int i, Date date, Calendar calendar) throws SQLException {
        internalSetDate(i, date, calendar, SET_DATE_INT_I_DATE_DATE_CALENDAR_CALENDAR);
    }

    @Override
    public void setTime(int i, Time time, Calendar calendar) throws SQLException {
        internalSetDate(i, time, calendar, SET_TIME_INT_I_TIME_TIME_CALENDAR_CALENDAR);
    }

    @Override
    public void setTimestamp(int i, Timestamp timestamp, Calendar calendar) throws SQLException {
        internalSetDate(i, timestamp, calendar, SET_TIMESTAMP_INT_I_TIMESTAMP_TIMESTAMP_CALENDAR_CALENDAR);
    }

    @Override
    public void setNull(int i, int i1, String s) throws SQLException {
        methodInvocationState.getState().put(i, new MethodInvocationEntry<>(
                SET_NULL_INT_I_INT_I1_STRING_S,
                new Object[] {i1, s})
        );
        methodInvocationState.getBrState().put(i, null);
    }

    @Override
    public void setURL(int i, URL url) throws SQLException {
        methodInvocationState.getState().put(i, new MethodInvocationEntry<>(SET_URL_INT_I_URL_URL, new Object[] {url}));
        if (url == null) {
            methodInvocationState.getBrState().put(i, null);
        } else {
            methodInvocationState.getBrState().put(i, url.toString().getBytes(StandardCharsets.UTF_8));
        }
    }

    @Override
    public void setRowId(int i, RowId rowId) throws SQLException {
        // will not be supported
        throw new SQLException(OPERATION_NOT_SUPPORTED);
    }

    @Override
    public void setNString(int i, String s) throws SQLException {
        methodInvocationState.getState().put(i, new MethodInvocationEntry<>(SET_NSTRING_INT_I_STRING_S, new Object[] {s}));
        if (s == null) {
            methodInvocationState.getBrState().put(i, null);
        } else {
            methodInvocationState.getBrState().put(i, s.getBytes(StandardCharsets.UTF_8));
        }

    }

    @Override
    public void setNCharacterStream(int i, Reader reader, long l) throws SQLException {
        internalSetReader(i, reader, l, SET_NCHARACTERSTREAM_INT_I_READER_READER_LONG_L);
    }

    @Override
    public void setNClob(int i, NClob nClob) throws SQLException {
        internalSetClob(i, nClob, SET_NCLOB_INT_I_NCLOB_NCLOB);
    }

    @Override
    public void setClob(int i, Reader reader, long l) throws SQLException {
        internalSetReader(i, reader, l, SET_CLOB_INT_I_READER_READER_LONG_L);
    }

    @Override
    public void setBlob(int i, InputStream inputStream, long l) throws SQLException {
        internalSetInputStream(i, inputStream, l, SET_BLOB_INT_I_INPUTSTREAM_INPUTSTREAM_LONG_L);
    }

    @Override
    public void setNClob(int i, Reader reader, long l) throws SQLException {
        internalSetReader(i, reader, l, SET_NCLOB_INT_I_READER_READER_LONG_L);
    }

    @Override
    public void setSQLXML(int i, SQLXML sqlxml) throws SQLException {
        methodInvocationState.getState().put(i, new MethodInvocationEntry<>(SET_SQLXML_INT_I_SQLXML_SQLXML, new Object[] {sqlxml}));
        if (sqlxml == null) {
            methodInvocationState.getBrState().put(i, null);
        } else {
            try {
                byte[] bArr = IOUtils.readerToBytes(sqlxml.getCharacterStream());
                methodInvocationState.getBrState().put(i, bArr);
            } catch (IOException e) {
                throw new SQLException(e);
            }
        }
    }

    @Override
    public void setObject(int i, Object o, int i1, int i2) throws SQLException {
        methodInvocationState.getState().put(i, new MethodInvocationEntry<>(
                SET_OBJECT_INT_I_OBJECT_O_INT_I1_INT_I2,
                new Object[] {o, i1, i2})
        );
        if (o == null) {
            methodInvocationState.getBrState().put(i, null);
        } else {
            // TODO
        }
    }

    @Override
    public void setAsciiStream(int i, InputStream inputStream, long l) throws SQLException {
        internalSetInputStream(i, inputStream, l, SET_ASCIISTREAM_INT_I_INPUTSTREAM_INPUTSTREAM_LONG_L);
    }

    @Override
    public void setBinaryStream(int i, InputStream inputStream, long l) throws SQLException {
        internalSetInputStream(i, inputStream, l, SET_BINARYSTREAM_INT_I_INPUTSTREAM_INPUTSTREAM_LONG_L);
    }

    @Override
    public void setCharacterStream(int i, Reader reader, long l) throws SQLException {
        internalSetReader(i, reader, l, SET_CHARACTERSTREAM_INT_I_READER_READER_LONG_L);
    }

    private void internalSetReader(int i, Reader reader, long l, MuxPreparedStatementMethodInvocation methodInvocation) throws SQLException {
        methodInvocationState.getState().put(i, new MethodInvocationEntry<>(
                methodInvocation,
                new Object[] {reader, l})
        );
        if (reader == null) {
            methodInvocationState.getBrState().put(i, null);
        } else {
            try {
                byte[] bArr = IOUtils.readerToBytes(reader, l);
                methodInvocationState.getBrState().put(i, bArr);
            } catch (IOException e) {
                throw new SQLException(e);
            }
        }
    }

    @Override
    public void setAsciiStream(int i, InputStream inputStream) throws SQLException {
        internalSetInputStream(i, inputStream, SET_ASCIISTREAM_INT_I_INPUTSTREAM_INPUTSTREAM);
    }

    @Override
    public void setBinaryStream(int i, InputStream inputStream) throws SQLException {
        internalSetInputStream(i, inputStream, SET_BINARYSTREAM_INT_I_INPUTSTREAM_INPUTSTREAM);
    }

    @Override
    public void setCharacterStream(int i, Reader reader) throws SQLException {
        internalSetReader(i, reader, SET_CHARACTERSTREAM_INT_I_READER_READER);
    }

    @Override
    public void setNCharacterStream(int i, Reader reader) throws SQLException {
        internalSetReader(i, reader, SET_NCHARACTERSTREAM_INT_I_READER_READER);
    }

    @Override
    public void setClob(int i, Reader reader) throws SQLException {
        internalSetReader(i, reader, SET_CLOB_INT_I_READER_READER);
    }

    @Override
    public void setBlob(int i, InputStream inputStream) throws SQLException {
        internalSetInputStream(i, inputStream, SET_BLOB_INT_I_INPUTSTREAM_INPUTSTREAM);
    }

    private void internalSetInputStream(int i, InputStream inputStream, MuxPreparedStatementMethodInvocation methodInvocation) throws SQLException {
        methodInvocationState.getState().put(i, new MethodInvocationEntry<>(methodInvocation, new Object[] {inputStream}));
        if (inputStream == null) {
            methodInvocationState.getBrState().put(i, null);
        } else {
            try {
                byte[] bArr = IOUtils.streamToBytes(inputStream);
                methodInvocationState.getBrState().put(i, bArr);
            } catch (IOException e) {
                throw new SQLException(e);
            }
        }
    }

    @Override
    public void setNClob(int i, Reader reader) throws SQLException {
        internalSetReader(i, reader, SET_NCLOB_INT_I_READER_READER);
    }

    //-------------------------
    private void internalSetDate(int i, java.util.Date date, MuxPreparedStatementMethodInvocation methodInvocation) throws SQLException {
        internalSetDate(i, date, null, methodInvocation);
    }

    private void internalSetDate(int i, java.util.Date date, Calendar calendar, MuxPreparedStatementMethodInvocation methodInvocation) throws SQLException {
        if (calendar == null) {
            methodInvocationState.getState().put(i, new MethodInvocationEntry<>(methodInvocation, new Object[] {date}));
        } else {
            methodInvocationState.getState().put(i, new MethodInvocationEntry<>(methodInvocation, new Object[] {date, calendar}));
        }
        if (date == null) {
            methodInvocationState.getBrState().put(i, null);
        } else {
            long ts = date.getTime();
            byte[] bArr = new byte[Long.BYTES];
            ByteUtils.writeLong(bArr, 0, ts);
            methodInvocationState.getBrState().put(i, bArr);
        }
    }

    private void internalSetReader(int i, Reader reader, MuxPreparedStatementMethodInvocation setNclobIntIReaderReader) throws SQLException {
        methodInvocationState.getState().put(i, new MethodInvocationEntry<>(setNclobIntIReaderReader, new Object[] {reader}));
        if (reader == null) {
            methodInvocationState.getBrState().put(i, null);
        } else {
            try {
                byte[] bArr = IOUtils.readerToBytes(reader);
                methodInvocationState.getBrState().put(i, bArr);
            } catch (IOException e) {
                throw new SQLException(e);
            }
        }
    }

    private void internalSetInputStream(int i, InputStream inputStream, long l, MuxPreparedStatementMethodInvocation methodInvocation) throws SQLException {
        methodInvocationState.getState().put(i, new MethodInvocationEntry<>(
                methodInvocation,
                new Object[] {inputStream, l})
        );
        if (inputStream == null) {
            methodInvocationState.getBrState().put(i, null);
        } else {
            try {
                byte[] bArr = IOUtils.streamToBytes(inputStream, l);
                methodInvocationState.getBrState().put(i, bArr);
            } catch (IOException e) {
                throw new SQLException(e);
            }
        }
    }

    private void internalSetClob(int i, Clob clob, MuxPreparedStatementMethodInvocation setClobIntIClobClob) throws SQLException {
        methodInvocationState.getState().put(i, new MethodInvocationEntry<>(setClobIntIClobClob, new Object[] {clob}));
        if (clob == null) {
            methodInvocationState.getBrState().put(i, null);
        } else {
            try {
                byte[] bArr = IOUtils.readerToBytes(clob.getCharacterStream(), clob.length());
                methodInvocationState.getBrState().put(i, bArr);
            } catch (IOException e) {
                throw new SQLException(e);
            }
        }
    }
    //-------------------------
    @Override
    public void clearParameters() {
        methodInvocationState.clear();
    }

    @Override
    public void addBatch() throws SQLException {
        // will not be supported
        throw new SQLException(OPERATION_NOT_SUPPORTED);
    }

    @Override
    public ResultSetMetaData getMetaData() throws SQLException {
        return null; // TODO
    }

    @Override
    public ParameterMetaData getParameterMetaData() throws SQLException {
        return null; // TODO
    }
}
